# -*- coding: utf-8 -*-
"""
Created on Wed May 20 10:56:18 2020

@author: pielsticker
"""

import numpy as np
import os
import json
from time import time
import pymongo

import credentials


#%%

def upload_to_DB_from_json(filename, collection_name):
    """
    To upload the json file with the name 'filename.json' to the
    collection 'collection_name' in the MongoDB database.

    Parameters
    ----------
    filename : str
        Filename of the json file w/o the extension.
    collection_name : str
        Collection name for the upload.

    Returns
    -------
    None.

    """
    client = pymongo.MongoClient(credentials.connectionstring)

    db = client[credentials.db_name]
        

    # Check for overwriting.
    write = True
    collections = [collection for collection \
                   in db.list_collection_names()]
        

# =============================================================================
#     #Upload data to DB 
#     with open(filename) as json_file:
#         data_list = json.load(json_file)
#         filenumber = int(filename.split('_')[3].split('.')[0])
#         for data in data_list:
#             index = data_list.index(data)
#             spectrum_number = filenumber*len(data_list) + index
#             print('filenumber: ' + str(filenumber),
#                   'spectrum_number: ' + str(spectrum_number))  
#             collection_name_upload = collection_name + str(spectrum_number)
#             db[collection_name_upload].delete_many({})
#             db[collection_name_upload].insert_one(data)
#                
# 
# =============================================================================
def check_db(collection_name):  
    """
    Check which data was uploaded. 

    Parameters
    ----------
    collection_name : str, optional
        Name of the collection for which the data is to be checked.

    Returns
    -------
    c : dict
        All collections in the db.
    all_data : list
        All data in the collection with the name 'collection_name'

    """
    client = pymongo.MongoClient(credentials.connectionstring)

    db = client[credentials.db_name]
    collection = db[collection_name]
    


    all_data = []
    for doc in collection.find():
        data_single = doc
        # Remove MongoDB id
        del data_single['_id']
        data_single['x'] = np.array(data_single['x'])
        data_single['y'] = np.array(data_single['y'])
        all_data.append(data_single)
        
    c = dict((collection,
              [document for document in db.collection.find()])
             for collection in db.list_collection_names())
    client.close()

    return c, all_data      


def drop_db_collection(collection_name):  
    """
    Removes a collection from the SIALab MongoDB.

    Parameters
    ----------
    collection_name : str, optional
        Name of the collection which shall be deleted.

    Returns
    -------
    None.

    """
    client = pymongo.MongoClient(credentials.connectionstring)

    db = client[credentials.db_name]
    collection = db[collection_name]
    collection.drop()
    
    
def calculate_runtime(start, end):
    """
    Function to calculate the runtime between two points and return a
    string of the format hh:mm:ss:ff.

    Parameters
    ----------
    start : float32
        Start time, generated by start = time().
    end : float32
        Start time, generated by end = time().

    Returns
    -------
    return_string : str
        Returns a string of the format hh:mm:ss:ff.

    """
    time = end - start    
    hours, rem = divmod(time, 3600)
    minutes, seconds = divmod(rem, 60)
    runtime = "{:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds)
    
    return runtime

#%%
t0 = time()
input_datafolder = r'C:\Users\pielsticker\simulations'

filename_basic = input_datafolder + '\\' + '20200519_iron_single_'
collection_name_basic = 'Fe_single_'
             
# Determine no. of simulations files
 #no_of_files = len(next(os.walk(input_datafolder))[2])
no_of_files = 1
                
for i in range(no_of_files): 
    filename_load = filename_basic + str(i) + '.json'
    upload_to_DB_from_json(filename_load, collection_name_basic)        
    #print('Upload: ' + str(i+1) + '/' + str(no_of_files))
t1 = time()

runtime = calculate_runtime(t0,t1)
print(f'Runtime: {runtime}.')
del(t0,t1,runtime,filename_basic,no_of_files)

#c, all_data = check_db(collection_name_basic + str(3999999))#

    